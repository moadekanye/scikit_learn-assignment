import numpy as np
import pandas as pd
from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.linear_model import LogisticRegression

# Load the breast cancer dataset
data = load_breast_cancer()
X = data.data
y = data.target
# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)
# Initialize models
log_reg = LogisticRegression(max_iter=1000)
svc = SVC()
rf_classifier = RandomForestClassifier()

# Train the models
log_reg.fit(X_train, y_train)
svc.fit(X_train, y_train)
rf_classifier.fit(X_train, y_train)
# Make predictions
log_reg_pred = log_reg.predict(X_test)
svc_pred = svc.predict(X_test)
rf_pred = rf_classifier.predict(X_test)
# Define a function to evaluate and print the metrics
def evaluate_model(model_name, y_true, y_pred):
    accuracy = accuracy_score(y_true, y_pred)
    precision = precision_score(y_true, y_pred)
    recall = recall_score(y_true, y_pred)
    f1 = f1_score(y_true, y_pred)
    
    print(f"{model_name} Evaluation:")
    print(f"Accuracy: {accuracy:.4f}")
    print(f"Precision: {precision:.4f}")
    print(f"Recall: {recall:.4f}")
    print(f"F1 Score: {f1:.4f}")
    print(classification_report(y_true, y_pred))
    print("-" * 50)

# Evaluate all models
evaluate_model("Logistic Regression", y_test, log_reg_pred)
evaluate_model("Support Vector Classifier", y_test, svc_pred)
evaluate_model("Random Forest Classifier", y_test, rf_pred)
